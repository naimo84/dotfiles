typeset -U path cdpath fpath manpath

HISTSIZE="10000"
SAVEHIST="100000"
HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
unsetopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
unsetopt HIST_EXPIRE_DUPS_FIRST
setopt SHARE_HISTORY
unsetopt EXTENDED_HISTORY

autoload -U +X bashcompinit && bashcompinit
autoload -U +X compinit && compinit

# disable standard terminal function CTRL-Q and CTRL-S to stop output and resume
stty -ixon

# make sure prompt gets printed on a new line
setopt PROMPT_SP
setopt PROMPT_CR
export PROMPT_EOL_MARK=%B%S%#%s%b
setopt PROMPT_SUBST
PROMPT='%F{green}%n@%F{yellow}%m:%f%~%f %F{red}$ %f'

function chpwd() {
    if [ ! -t 1 ]; then # don't generate output when changing directory in a script
        return
    fi
    local listing="$(ll)"
    local numdisplayfiles=25
    local numfiles="$(echo "$listing" | wc -l)"
    echo "$listing" | head -n"$numdisplayfiles"
    [ "$numfiles" -gt "$numdisplayfiles" ] \
        && echo -e "\e[3m  (there are $((numfiles - numdisplayfiles)) more files in this folder)\e[23m"
}

###--------------------- Sources ---------------------------------###
if [ -d ~/.oh-my-zsh ]; then
  export ZSH="$HOME/.oh-my-zsh"
  plugins=(git zsh-autosuggestions ansible fzf-tab)
 
  source $ZSH/oh-my-zsh.sh
else
  source $HOME/.config/zsh/zsh-autosuggestions.zsh
fi 


###--------------------- Sources ---------------------------------###

###--------------------- Commands ---------------------------------###
if [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

if command -v starship &> /dev/null
then
   unset ZSH_THEME
  # find out which distribution we are running on
  LFILE="/etc/*-release"
  MFILE="/System/Library/CoreServices/SystemVersion.plist"
  if [[ -f $LFILE ]]; then
    _distro=$(awk '/^ID=/' /etc/*-release | awk -F'=' '{ print tolower($2) }')
  elif [[ -f $MFILE ]]; then
    _distro="macos"

    # on mac os use the systemprofiler to determine the current model
    _device=$(system_profiler SPHardwareDataType | awk '/Model Name/ {print $3,$4,$5,$6,$7}')

    case $_device in
      *MacBook*)     DEVICE="";;
      *mini*)        DEVICE="󰇄";;
      *)             DEVICE="";;
    esac
  fi

  # set an icon based on the distro
  # make sure your font is compatible with https://github.com/lukas-w/font-logos
  case $_distro in
      *kali*)                  ICON="ﴣ";;
      *arch*)                  ICON="";;
      *debian*)                ICON="";;
      *raspbian*)              ICON="";;
      *ubuntu*)                ICON="";;
      *elementary*)            ICON="";;
      *fedora*)                ICON="";;
      *coreos*)                ICON="";;
      *gentoo*)                ICON="";;
      *mageia*)                ICON="";;
      *centos*)                ICON="";;
      *opensuse*|*tumbleweed*) ICON="";;
      *sabayon*)               ICON="";;
      *slackware*)             ICON="";;
      *linuxmint*)             ICON="";;
      *alpine*)                ICON="";;
      *aosc*)                  ICON="";;
      *nixos*)                 ICON="";;
      *devuan*)                ICON="";;
      *manjaro*)               ICON="";;
      *rhel*)                  ICON="";;
      *macos*)                 ICON="";;
      *)                       ICON="";;
  esac

  if [ -f ~/.config/starship.toml ]; then
    export STARSHIP_DISTRO="$ICON"
    export STARSHIP_DEVICE="$DEVICE"
    export STARSHIP_CONFIG=~/.config/starship.toml
    eval "$(starship init zsh)"
  fi
fi

if command -v kubectl &> /dev/null
then
  export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
  export KUBECONFIG=~/.kube/config
  source <(kubectl completion zsh)
  alias k=kubectl
  complete -F __start_kubectl k
fi

if command -v zoxide &> /dev/null
then
  eval "$(zoxide init zsh --cmd cd)"
fi

if command -v thefuck &> /dev/null
then
  eval $(thefuck --alias)
fi

if command -v direnv &> /dev/null
then
  eval "$(direnv hook zsh)"
fi
###--------------------- Commands ---------------------------------###

###--------------------- NPM ---------------------------------###
if command -v npm &> /dev/null
then
  if type complete &>/dev/null; then
    _npm_completion () {
      local words cword
      if type _get_comp_words_by_ref &>/dev/null; then
        _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
      else
        cword="$COMP_CWORD"
        words=("${COMP_WORDS[@]}")
      fi

      local si="$IFS"
      IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                            COMP_LINE="$COMP_LINE" \
                            COMP_POINT="$COMP_POINT" \
                            npm completion -- "${words[@]}" \
                            2>/dev/null)) || return $?
      IFS="$si"
      if type __ltrim_colon_completions &>/dev/null; then
        __ltrim_colon_completions "${words[cword]}"
      fi
    }
    complete -o default -F _npm_completion npm
  elif type compdef &>/dev/null; then
    _npm_completion() {
      local si=$IFS
      compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                  COMP_LINE=$BUFFER \
                  COMP_POINT=0 \
                  npm completion -- "${words[@]}" \
                  2>/dev/null)
      IFS=$si
    }
    compdef _npm_completion npm
  elif type compctl &>/dev/null; then
    _npm_completion () {
      local cword line point words si
      read -Ac words
      read -cn cword
      let cword-=1
      read -l line
      read -ln point
      si="$IFS"
      IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                        COMP_LINE="$line" \
                        COMP_POINT="$point" \
                        npm completion -- "${words[@]}" \
                        2>/dev/null)) || return $?
      IFS="$si"
    }
    compctl -K _npm_completion npm
  fi
fi
export NVM_DIR="$HOME/.nvm"
    [ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" # This loads nvm
    [ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion
###--------------------- NPM ---------------------------------###

###--------------------- FZF ---------------------------------###

if command -v fzf &> /dev/null
then
  eval "$(fzf --zsh)"
fi

if [[ $options[zle] = on ]]; then
  source $HOME/.config/zsh/fzf-completion.zsh
  source $HOME/.config/zsh/fzf-keybindings.zsh
fi
# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

show_file_or_dir_preview="if [ -d {} ]; then eza --tree --color=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi"

export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

# Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo \${}'"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview "$show_file_or_dir_preview" "$@" ;;
  esac
}

# --- setup fzf theme ---
fg="#CBE0F0"
bg="#011628"
bg_highlight="#143652"
purple="#B388FF"
blue="#06BCE4"
cyan="#2CF9ED"

export FZF_DEFAULT_OPTS="--color=fg:${fg},bg:${bg},hl:${purple},fg+:${fg},bg+:${bg_highlight},hl+:${purple},info:${blue},prompt:${cyan},pointer:${cyan},marker:${cyan},spinner:${cyan},header:${cyan}"
###--------------------- FZF ---------------------------------###

###--------------------- Sources ---------------------------------###
if [ -e "$HOME/.zprofile" ]; then
    source "$HOME/.zprofile"
fi

if [ -f ~/.zshenv ]; then
    source ~/.zshenv
fi

if [ -f ~/.zshcustom ]; then
    source ~/.zshcustom
fi


if [ -f ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi
###--------------------- Sources ---------------------------------###
